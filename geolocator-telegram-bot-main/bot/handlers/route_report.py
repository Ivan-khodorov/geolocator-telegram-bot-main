from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import select
from database.session import async_session
from database.models import User, Route, Point, PointPhoto
from bot.utils.auto_report import send_daily_report
from bot import Config
from datetime import datetime

router = Router()

@router.message(F.text == "/route")
async def show_route(message: Message):
    telegram_id = str(message.from_user.id)

    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
            return

        route = await session.scalar(
            select(Route).where(Route.user_id == user.id).order_by(Route.date.desc()).limit(1)
        )
        if not route:
            await message.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        points = await session.scalars(
            select(Point).where(Point.route_id == route.id)
        )

        if not points:
            await message.answer("–ú–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç.")
            return

        text = "üó∫ <b>–í–∞—à –º–∞—Ä—à—Ä—É—Ç:</b>\n\n"
        for p in points:
            status = "‚úÖ" if p.is_completed else "üî≤"
            text += f"{status} {p.address}\n"

        await message.answer(text, parse_mode="HTML")

@router.message(F.text == "/report")
async def show_report(message: Message):
    telegram_id = str(message.from_user.id)

    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == telegram_id))
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        route = await session.scalar(
            select(Route).where(Route.user_id == user.id).order_by(Route.date.desc()).limit(1)
        )
        if not route:
            await message.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        points = await session.scalars(
            select(Point).where(Point.route_id == route.id)
        )

        completed = [p for p in points if p.is_completed]
        total = len(list(points))

        text = f"üìä <b>–û—Ç—á—ë—Ç –∑–∞ {route.date.strftime('%d.%m.%Y')}</b>\n"
        text += f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫: {len(completed)} –∏–∑ {total}\n\n"

        await message.answer(text, parse_mode="HTML")

        for point in completed:
            address = point.address
            time = point.completed_at.strftime('%H:%M') if point.completed_at else "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            photos = await session.scalars(
                select(PointPhoto).where(PointPhoto.point_id == point.id)
            )
            photo_paths = [photo.filepath for photo in photos]

            await message.answer(f"‚úÖ <b>{address}</b>\nüïí {time}", parse_mode="HTML")

            for path in photo_paths:
                try:
                    with open(path, "rb") as f:
                        await message.answer_photo(f)
                except Exception:
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ.")
@router.message(F.text == "/admin_report")
async def trigger_admin_report(message: Message):
    if message.from_user.id != Config.ADMIN_CHAT_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç.")
        return

    await message.answer("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á—ë—Ç—ã...")
    await send_daily_report(message.bot)
    await message.answer("‚úÖ –û—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

